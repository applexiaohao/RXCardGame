// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;

namespace AssemblyCSharp
{
	public enum RX_ROLE_TYPE
	{
		RX_ROLE_DIZHU 	= 0,
		RX_ROLE_NONGMIN = 1,
		RX_ROLE_NORMAL 	= 2,
	}
	public enum RX_SEAT_POSITION
	{
		RX_SEAT_BOTTOM 	= 0,
		RX_SEAT_LEFT 	= 1,
		RX_SEAT_RIGHT 	= 2,
		RX_SEAT_TOP		= 3,
	}

	public class RX_SeatInfo
	{
		#region Game UI Property

		/// <summary>
		/// 定义座位类型  地主、农民、普通
		/// </summary>
		private RX_ROLE_TYPE seat_type;
		public RX_ROLE_TYPE Type{
			set{
				this.seat_type = value;
			}
			get{
				return seat_type;
			}
		}

		/// <summary>
		/// 座位的位置  左边、右边、下边
		/// </summary>
		private RX_SEAT_POSITION seat_pos;
		public RX_SEAT_POSITION Position{
			set{
				this.seat_pos = value;

				switch (this.seat_pos) 
				{
					case RX_SEAT_POSITION.RX_SEAT_BOTTOM:
					{
						break;
					}
					case RX_SEAT_POSITION.RX_SEAT_LEFT:
					{
						break;
					}
					case RX_SEAT_POSITION.RX_SEAT_RIGHT:
					{
						break;
					}
				}
			}
			get{
				return this.seat_pos;
			}
		}
			
		#endregion


		public RX_UserInfo User{ get; set; }
		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name="pos">座位的位置 左边、右边、下边</param>
		/// <param name="pool">座位上纸牌的容器 pool</param>
		public RX_SeatInfo (RX_SEAT_POSITION pos,UISprite pool)
		{
			this.Type 	= RX_ROLE_TYPE.RX_ROLE_NORMAL;
			this.Position	= pos;
			this.seat_container = pool;

			//在CreateSpriteBy函数实现的最后
			RX_CardManager.SetPool(pool,pos);
		}

		private UISprite	seat_container;

		/// <summary>
		/// 当前座位上还剩下的手牌列表
		/// </summary>
		private List<RX_Card> card_list;
		public List<RX_Card> CardList{
			set
			{
				this.card_list = value;

				//设置布局..
				this.LayoutCardList();
			}
			get{
				return this.card_list;
			}
		}


		/// <summary>
		/// 布局...
		/// </summary>
		private void LayoutCardList()
		{
			this.CardList.Sort((RX_Card x, RX_Card y) => {
				return (int)y.Level - (int)x.Level;
			});

			//每次将所有的剩余牌都要创建对象显示时
			//都应该将精灵池刷新一次..
			RX_CardManager.RefreshPool (this.Position);
				
			int width 	= this.seat_container.width;
			int height	= this.seat_container.height;

			//每个人最多20张牌,计算出最小的间距
			int margin = 0;
			if (this.Position == RX_SEAT_POSITION.RX_SEAT_LEFT ||
			    this.Position == RX_SEAT_POSITION.RX_SEAT_RIGHT) {
				margin = height / 20;
			} else {
				margin = width / 20;
			}

			//求出现在剩余多少张牌
			int count = this.card_list.Count;

			int min = 0 - count / 2 * margin;
			int temp = min;
			for (int i = 0; i < count; i++) 
			{
				RX_CardManager.CreateSpriteBy (this.card_list [i], this.seat_container, temp,this.Position);
				temp += margin;
			}
		}

		/// <summary>
		/// 属于RX_SeatInfo对象的弹出函数...
		/// </summary>
		/// <returns>The card set.</returns>
		public RX_CardSet PopCardSet()
		{
			//List对象有个FindAll函数
			//FindAll函数需要一个谓词Predicate条件,凡是复合该条件的所有List内的元素都会被添加
			//到一个新的List对象内
			List<RX_Card> list = this.CardList.FindAll ((RX_Card obj) => {
				return obj.IsPop;
			});

			//创建一个新的牌型集合...
			RX_CardSet card_set = new RX_CardSet ();
			//将选中的所有牌赋值给新的牌型集合对象
			card_set.Lister = list;



			//通过CardType的11种牌型函数判断，只要有一个为真
			//那么则为正确的牌型
			//当都为假的时候,说明牌型不正确,不能出牌..
			if (RX_CardType.IsDan (card_set) ||
			    RX_CardType.IsDui (card_set) ||
			    RX_CardType.IsShunzi (card_set) ||
			    RX_CardType.IsLianDui (card_set) ||
			    RX_CardType.IsBoom (card_set) ||
			    RX_CardType.IsBigBoom (card_set) ||
			    RX_CardType.IsFeijibudai (card_set) ||
			    RX_CardType.IsFeijidai (card_set) ||
			    RX_CardType.IsSanBuDai (card_set) ||
			    RX_CardType.IsSandaiyi (card_set) ||
			    RX_CardType.IsSidaier (card_set)) 
			{
				//将刚刚打出的牌型集合返回..
				return card_set;
			} else 
			{
				this.Reset ();
				return null;
			}
		}

		public void RemoveCardSet(RX_CardSet sender,UISprite pool)
		{
			sender.Lister.ForEach((RX_Card item) =>{

				this.CardList.RemoveAll(((RX_Card obj) => {
					return obj.Equals(item);
				}));
			});

			this.LayoutCardList();


			int width 	= pool.width;
			int height	= pool.height;
			
			//每个人最多20张牌,计算出最小的间距
			int margin = 0;
			if (this.Position == RX_SEAT_POSITION.RX_SEAT_LEFT ||
			    this.Position == RX_SEAT_POSITION.RX_SEAT_RIGHT) {
				margin = height / 20;
			} else {
				margin = width / 20;
			}
			
			//求出现在剩余多少张牌
			int count = sender.Lister.Count;
			
			int min = 0 - count / 2 * margin;
			int temp = min;
			for (int i = 0; i < count; i++) 
			{
				RX_CardManager.CreateSpriteBy (sender.Lister [i], pool, temp,this.Position);
				temp += margin;
			}
		}

		public void Reset()
		{
			this.CardList.ForEach((RX_Card item)=>{
				item.IsPop = false;
			});

			this.LayoutCardList();
		}
	}
}

