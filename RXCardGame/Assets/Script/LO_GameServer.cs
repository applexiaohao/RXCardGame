// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AssemblyCSharp
{
	/// <summary>
	/// 游戏服务器
	/// </summary>
	public class LO_GameServer:MonoBehaviour
	{
		#region 单例化过程

		private LO_GameServer ()
		{
		}

		private static GameObject s_LO_GameServer_object;
		private static LO_GameServer s_LO_GameServer = null;
		private static NetworkView s_LO_NetworkView = null;

		public static LO_GameServer DefaultServer
		{
			get{
				if (s_LO_GameServer == null) 
				{
					s_LO_GameServer_object = new GameObject("DefaultServer");
					s_LO_GameServer = s_LO_GameServer_object.AddComponent<LO_GameServer>();
					s_LO_NetworkView = s_LO_GameServer_object.AddComponent<NetworkView>();
				}

				return s_LO_GameServer;
			}
		}

		private static NetworkView DefalutNetworkView
		{
			get{
				return s_LO_NetworkView;
			}
		}
			
		#endregion


		/// <summary>
		/// 初始化设置游戏远程服务器
		/// </summary>
		public bool InitServer(string ip,int port)
		{
			//设置MasterServer的ip地址和port端口
			MasterServer.ipAddress = ip;
			MasterServer.port = port;

			return true;
		}

		/// <summary>
		/// 创建游戏房间函数
		/// </summary>
		public bool CreateRoom(string roomname)
		{
			//start...
			Network.InitializeServer(1000,25000,Network.HavePublicAddress());

			//register a game
			MasterServer.RegisterHost("Card",roomname);

			return true;
		}

		#region 请求游戏房间列表的过程

		public delegate void RequestRoomComplete(HostData[] list);
		private RequestRoomComplete complete_block = null;
		private RequestRoomComplete CompleteBlock{
			set{
				complete_block = value;
			}
			get{
				return complete_block;
			}
		}

		public void StartRequestRoom(RequestRoomComplete block)
		{
			LO_GameServer.DefaultServer.CompleteBlock = block;

			MasterServer.RequestHostList("Card");
		}
		#endregion



		#region 加入游戏房间的过程

		public delegate void JoinHostRoomDelegate(int state);
		private JoinHostRoomDelegate join_block = null;
		private JoinHostRoomDelegate JoinBlock{
			set{ 
				join_block = value;
			}
			get{ 
				return join_block;
			}
		}
		public void JoinHostRoom(HostData room,JoinHostRoomDelegate block)
		{
			//设定回调函数
			this.JoinBlock = block;
			//加入房间
			Network.Connect(room);
		}


		#endregion

		#region 发送游戏消息的过程

		public void SendGameMessage(string message)
		{
			LO_GameServer.DefalutNetworkView.RPC("RemoteReceiveMessage",RPCMode.All,message);
		}

		[RPC]
		public void RemoteReceiveMessage(string message)
		{
			Debug.Log(message);
		}

		#endregion


		#region 游戏脚本中的过程


		public void OnMasterServerEvent(MasterServerEvent ev)
		{
			switch (ev) {
			case MasterServerEvent.RegistrationSucceeded:
			{
				break;
			}
				
			case MasterServerEvent.RegistrationFailedNoServer:
			{
				break;
			}
			case MasterServerEvent.RegistrationFailedGameType:
			{
				break;
			}
			case MasterServerEvent.RegistrationFailedGameName:
			{
				break;
			}
			case MasterServerEvent.HostListReceived:
			{
				LO_GameServer.DefaultServer.CompleteBlock(MasterServer.PollHostList());
				break;
			}
			default:
				break;
			}

		}


		public void OnPlayerConnected(NetworkPlayer player)
		{
			Debug.Log("OnPlayerConnected");
		}

		public void OnConnectedToServer()
		{
			this.JoinBlock(0);
			Debug.Log("OnConnectedToServer");
		}

		#endregion
	}
}






